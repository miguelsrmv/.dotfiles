return {
  'CopilotC-Nvim/CopilotChat.nvim',
  dependencies = {
    { 'zbirenbaum/copilot.lua' },
    { 'nvim-lua/plenary.nvim', branch = 'master' }, -- for curl, log and async functions
  },
  opts = {
    vim.keymap.set('n', '<leader>cd', ':CopilotChatDocs<CR>', { desc = 'CoPilot [D]ocs' }),
    vim.keymap.set('n', '<leader>cg', ':CopilotChatCommit<CR>', { desc = 'CoPilot [G]it commit' }),
    vim.keymap.set('n', '<leader>cc', ':CopilotChat<CR>', { desc = 'CoPilot [C]hat' }),
    vim.keymap.set('n', '<leader>ce', ':CopilotChatExplain<CR>', { desc = 'CoPilot [E]xplain' }),
    vim.keymap.set('n', '<leader>co', ':CopilotChatOptimize<CR>', { desc = 'CoPilot [O]ptimize' }),
    vim.keymap.set('n', '<leader>cr', ':CopilotChatReview<CR>', { desc = 'CoPilot [R]eview' }),
    vim.keymap.set('n', '<leader>cf', ':CopilotChatFix<CR>', { desc = 'CoPilot [F]ix' }),
    vim.keymap.set('n', '<leader>cm', ':CopilotChatModels<CR>', { desc = 'CoPilot [M]odels' }),
    vim.keymap.set('n', '<leader>ct', ':CopilotChatTests<CR>', { desc = 'CoPilot [T]ests' }),
    -- See Configuration section for options
  },
}

-- vim: ts=2 sts=2 sw=2 et
